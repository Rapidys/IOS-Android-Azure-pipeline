trigger:
  branches:
    include:
      - azure-pipeline

pr: none

variables:
  - group: MobileApp

pool:
  vmImage: 'macOS-13'

steps:
  - checkout: self
    persistCredentials: true
    clean: true

  - task: NodeTool@0
    displayName: 'Install Node'
    inputs:
      versionSpec: '20.16.0'
  - script: |
      corepack enable
      
      yarn set version 3.8.2
      
      yarn --version
      
      yarn cache clean
      
      rm -rf node_modules
      yarn install
    env:
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
    displayName: 'Update Global Yarn, Install Dependencies, and Apply Patches'

  - task: PowerShell@2
    displayName: Select Xcode Version
    inputs:
      targetType: 'inline'
      script: |
        echo Mac OS version:
        sw_vers -productVersion
        echo Installed Xcode versions:
        ls /Applications | grep 'Xcode'
        echo currently selected xcode:
        xcrun xcode-select --print-path
        echo selecting latest xcode...
        sudo xcode-select -s /Applications/Xcode_15.2.app
        xcrun xcode-select --print-path
        xcodebuild -version


  - script: |
      # Disable autocommit on version bump
      yarn config set version-sign-git-tag false
      yarn config set version-git-tag false
      yarn config set version-commit-hooks false
      # Checkout the branch where the build is triggered
      git checkout $(Build.SourceBranchName)
      # Get the existing version from package.json
      oldVer=$(jq -r ".version" package.json)
      # Bump version
      yarn version --patch
      # Add bumped version to staging
      git add *
      # Get the new version from package.json
      newVer=$(jq -r ".version" package.json)
      # Set environment variables for old and new versions
      echo "##vso[task.setvariable variable=OLD_VERSION]$oldVer"
      echo "##vso[task.setvariable variable=NEW_VERSION]$newVer"
    displayName: 'Bump version and set variables'

  - task: CocoaPods@0
    displayName: "Install CocoaPods dependencies"
    inputs:
      workingDirectory: ios

  - task: InstallAppleCertificate@2
    displayName: 'Install Apple Certificate'
    inputs:
      certSecureFile: 'iosAppCertificate.p12'
      certPwd: '$(AppleCertificatePassword)'

  - task: InstallAppleProvisioningProfile@1
    displayName: 'Install Apple Provisioning Profile'
    inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: 'Appcenter_Staging_Profile.mobileprovision'

  # Step to read the current marketing version from Info.plist
  - script: |
      marketingVersion=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" ios/*/info.plist)
      echo "##vso[task.setvariable variable=MarketingVersion]$marketingVersion"
    displayName: 'Get Marketing Version'

  - task: ios-bundle-version@1
    displayName: "Set versions"
    inputs:
      sourcePath: 'ios/*/info.plist'
      versionCodeOption: 'buildid'
      versionCode: '$(Build.BuildId)'
      versionName: '$(MarketingVersion)'
      printFile: true


  - task: Xcode@5
    displayName: 'Build and Archive iOS App'
    inputs:
      actions: 'build'
      configuration: 'Release'
      sdk: 'iphoneos'
      scheme: 'app scheme'
      xcWorkspacePath: 'ios/*.xcworkspace'
      packageApp: true
      exportPath: 'output'
      signingOption: 'manual'
      signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
      provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'


  - task: CopyFiles@2
    displayName: 'Copy IPA'
    inputs:
      contents: '**/*.ipa'
      targetFolder: '$(build.artifactStagingDirectory)'
      overWrite: true
      flattenFolders: true


  - task: PublishBuildArtifacts@1
    displayName: 'Publish IPA to Artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/*.ipa'
      ArtifactName: 'ios'
      publishLocation: 'Container'

  - task: DownloadBuildArtifacts@0
    displayName: 'Download artifacts'
    inputs:
      buildType: current
      downloadType: specific
      artifactName: ios
      downloadPath: '$(build.artifactStagingDirectory)'

  # Download the .p8 file from secure files
  - task: DownloadSecureFile@1
    displayName: 'Download Apple AuthKey (.p8)'
    inputs:
      secureFile: 'ApplePrivateAuthKey.p8'
  #
  - task: AppStoreRelease@1
    inputs:
      authType: ApiKey
      apiKeyId: '$(ApiKeyId)'
      apiKeyIssuerId: '$(ApiKeyIssuerId)'
      apitoken: '$(ApiToken)'
      releaseTrack: TestFlight
      appIdentifier: 'com.appid'
      appType: iOS
      ipaPath: '$(build.artifactStagingDirectory)/ios/*.ipa'
      shouldSkipWaitingForProcessing: true
      shouldSkipSubmission: true

